# Copyright (c) 2010-2023, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

include(CMakeFindDependencyMacro)
include(${CMAKE_CURRENT_LIST_DIR}/MFEMConfigVersion.cmake)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/modules)

set(MFEM_VERSION ${PACKAGE_VERSION})
set(MFEM_VERSION_INT @MFEM_VERSION@)
set(MFEM_GIT_STRING "@MFEM_GIT_STRING@")

set(MFEM_DEBUG @MFEM_DEBUG@)
set(MFEM_USE_EXCEPTIONS @MFEM_USE_EXCEPTIONS@)
set(MFEM_THREAD_SAFE @MFEM_THREAD_SAFE@)
set(MFEM_USE_MEMALLOC @MFEM_USE_MEMALLOC@)
set(MFEM_TIMER_TYPE @MFEM_TIMER_TYPE@)

set(MFEM_USE_HIP @MFEM_USE_HIP@)
if(MFEM_USE_HIP)
  find_dependency(HIP)
  find_dependency(HIPSPARSE)
endif()
set(MFEM_USE_MPI @MFEM_USE_MPI@)
if(MFEM_USE_MPI)
  find_dependency(MPI)
  find_dependency(HYPRE)
endif()
set(MFEM_USE_PETSC @MFEM_USE_PETSC@)
if(MFEM_USE_PETSC)
  find_dependency(PETSC)
endif()
set(MFEM_USE_SLEPC @MFEM_USE_SLEPC@)
if(MFEM_USE_SLEPC)
  find_dependency(SLEPC)
endif()
set(MFEM_USE_METIS @MFEM_USE_METIS@)
if(MFEM_USE_METIS)
  find_dependency(METIS)
endif()
set(MFEM_USE_GINKGO @MFEM_USE_GINKGO@)
if(MFEM_USE_GINKGO)
  find_dependency(Ginkgo)
endif()
set(MFEM_USE_ZLIB @MFEM_USE_ZLIB@)
if(MFEM_USE_ZLIB)
  find_dependency(ZLIB)
endif()
set(MFEM_USE_LIBUNWIND @MFEM_USE_LIBUNWIND@)
if(MFEM_USE_LIBUNWIND)
  set(MFEMBacktrace_REQUIRED_PACKAGES "Libunwind" "LIBDL" "CXXABIDemangle")
  find_dependency(MFEMBacktrace)
endif()
set(MFEM_USE_LAPACK @MFEM_USE_LAPACK@)
if(MFEM_USE_LAPACK)
  find_dependency(BLAS)
  find_dependency(LAPACK)
endif()
set(MFEM_USE_OPENMP @MFEM_USE_OPENMP@)
set(MFEM_USE_LEGACY_OPENMP @MFEM_USE_LEGACY_OPENMP@)
if(MFEM_USE_OPENMP)
  find_dependency(OpenMP)
endif()
set(MFEM_USE_SUITESPARSE @MFEM_USE_SUITESPARSE@)
if(MFEM_USE_SUITESPARSE)
  find_dependency(SuiteSparse)
endif()
set(MFEM_USE_SUNDIALS @MFEM_USE_SUNDIALS@)
if(MFEM_USE_SUNDIALS)
  find_dependency(SUNDIALS)
endif()
set(MFEM_USE_MESQUITE @MFEM_USE_MESQUITE@)
if(MFEM_USE_MESQUITE)
  find_dependency(Mesquite)
endif()
set(MFEM_USE_SUPERLU @MFEM_USE_SUPERLU@)
if(MFEM_USE_SUPERLU)
  find_dependency(SuperLUDist)
endif()
set(MFEM_USE_MUMPS @MFEM_USE_MUMPS@)
if(MFEM_USE_MUMPS)
  find_dependency(MUMPS)
endif()
set(MFEM_USE_STRUMPACK @MFEM_USE_STRUMPACK@)
if(MFEM_USE_STRUMPACK)
  find_dependency(STRUMPACK)
endif()
set(MFEM_USE_GNUTLS @MFEM_USE_GNUTLS@)
if(MFEM_USE_GNUTLS)
  # BUG: We have a collision name here, because GNUTLS_FOUND is set instead of
  # _GnuTLS_FOUND
  find_dependency(_GnuTLS)
endif()
set(MFEM_USE_GSLIB @MFEM_USE_GSLIB@)
if(MFEM_USE_GSLIB)
  find_dependency(GSLIB)
endif()
set(MFEM_USE_NETCDF @MFEM_USE_NETCDF@)
if(MFEM_USE_NETCDF)
  find_dependency(netCDF)
endif()
set(MFEM_USE_MPFR @MFEM_USE_MPFR@)
if(MFEM_USE_MPFR)
  find_dependency(MPFR)
endif()
set(MFEM_USE_CEED @MFEM_USE_CEED@)
if(MFEM_USE_CEED)
  find_dependency(libCEED)
endif()
set(MFEM_USE_AMGX @MFEM_USE_AMGX@)
if(MFEM_USE_AMGX)
  find_dependency(AMGX)
endif()
set(MFEM_USE_CONDUIT @MFEM_USE_CONDUIT@)
if(MFEM_USE_CONDUIT)
  find_dependency(Conduit)
endif()
set(MFEM_USE_FMS @MFEM_USE_FMS@)
if(MFEM_USE_FMS)
  find_dependency(FMS)
endif()
set(MFEM_USE_SIDRE @MFEM_USE_SIDRE@)
if(MFEM_USE_SIDRE)
  find_dependency(Axom)
endif()
set(MFEM_USE_PUMI @MFEM_USE_PUMI@)
if(MFEM_USE_PUMI)
  find_dependency(SCOREC)
endif()
set(MFEM_USE_MOONOLITH @MFEM_USE_MOONOLITH@)
if(MFEM_USE_MOONOLITH)
  find_dependency(ParMoonolith)
endif()
set(MFEM_USE_HIOP @MFEM_USE_HIOP@)
if(MFEM_USE_HIOP)
  find_dependency(HIOP)
endif()
set(MFEM_USE_CODIPACK @MFEM_USE_CODIPACK@)
if(MFEM_USE_CODIPACK)
  find_dependency(CODIPACK)
endif()
set(MFEM_USE_OCCA @MFEM_USE_OCCA@)
if(MFEM_USE_OCCA)
  find_dependency(OCCA)
endif()
set(MFEM_USE_RAJA @MFEM_USE_RAJA@)
if(MFEM_USE_RAJA)
  find_dependency(RAJA)
endif()
set(MFEM_USE_UMPIRE @MFEM_USE_UMPIRE@)
if(MFEM_USE_UMPIRE)
  find_dependency(UMPIRE)
endif()
set(MFEM_USE_BENCHMARK @MFEM_USE_BENCHMARK@)
if(MFEM_USE_BENCHMARK)
  find_dependency(Benchmark)
endif()
set(MFEM_USE_CALIPER @MFEM_USE_CALIPER@)
if(MFEM_USE_CALIPER)
  find_dependency(Caliper)
endif()
set(MFEM_USE_ALGOIM @MFEM_USE_ALGOIM@)
if(MFEM_USE_ALGOIM)
  find_dependency(Algoim)
endif()
set(MFEM_USE_ADIOS2 @MFEM_USE_ADIOS2@)
if(MFEM_USE_ADIOS2)
  find_dependency(ADIOS2)
endif()
set(MFEM_USE_MKL_CPARDISO @MFEM_USE_MKL_CPARDISO@)
if(MFEM_USE_MKL_CPARDISO)
  find_dependency(MKL_CPARDISO)
endif()
set(MFEM_USE_PARELAG @MFEM_USE_PARELAG@)
if(MFEM_USE_PARELAG)
  find_dependency(PARELAG)
endif()
set(MFEM_USE_ENZYME @MFEM_USE_ENZYME@)
if(MFEM_USE_ENZYME)
  find_dependency(ENZYME)
endif()
set(MFEM_USE_CUDA @MFEM_USE_CUDA@)

find_dependency(Threads)

set(MFEM_CXX_COMPILER "@CMAKE_CXX_COMPILER@")
set(MFEM_CXX_FLAGS "@CMAKE_CXX_FLAGS@")

@PACKAGE_INIT@

set(MFEM_INCLUDE_DIRS "@PACKAGE_INCLUDE_INSTALL_DIRS@")
foreach (dir ${MFEM_INCLUDE_DIRS})
  set_and_check(MFEM_INCLUDE_DIR "${dir}")
endforeach (dir "${MFEM_INCLUDE_DIRS}")

set_and_check(MFEM_LIBRARY_DIR "@PACKAGE_LIB_INSTALL_DIR@")

check_required_components(MFEM)

if (NOT TARGET mfem)
  include(${CMAKE_CURRENT_LIST_DIR}/MFEMTargets.cmake)
endif (NOT TARGET mfem)

set(MFEM_LIBRARIES mfem)
