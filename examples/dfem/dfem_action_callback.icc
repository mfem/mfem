template <
   typename kernels_tuple,
   size_t num_solutions,
   size_t num_parameters,
   size_t num_fields,
   size_t num_kernels
   >
template <
   typename kernel_t
   >
void DifferentiableOperator<kernels_tuple,
     num_solutions,
     num_parameters,
     num_fields,
     num_kernels>::Action::create_action_callback(
        kernel_t kernel,
        mult_func_t &func)
{
   using entity_t = typename kernel_t::entity_t;

   auto kinput_to_field = create_descriptors_to_fields_map<entity_t>(op.fields,
                                                                     kernel.inputs, std::make_index_sequence<kernel.num_kinputs> {});

   auto koutput_to_field = create_descriptors_to_fields_map<entity_t>(op.fields,
                                                                      kernel.outputs, std::make_index_sequence<kernel.num_koutputs> {});

   constexpr int hardcoded_output_idx = 0;
   const int test_space_field_idx = koutput_to_field[hardcoded_output_idx];

   const Operator *R = get_restriction<entity_t>(op.fields[test_space_field_idx],
                                                 element_dof_ordering);

   auto output_fop = mfem::get<hardcoded_output_idx>(kernel.outputs);

   const int num_elements = GetNumEntities<Entity::Element>(op.mesh);
   const int num_entities = GetNumEntities<entity_t>(op.mesh);
   const int num_qp = op.integration_rule.GetNPoints();

   // All solutions T-vector sizes make up the width of the operator, since
   // they are explicitly provided in Mult() for example.

   op.width = GetTrueVSize(op.fields[test_space_field_idx]);
   op.residual_lsize = GetVSize(op.fields[test_space_field_idx]);

   if constexpr (std::is_same_v<decltype(output_fop), One>)
   {
      op.height = 1;
   }
   else
   {
      op.height = op.residual_lsize;
   }

   residual_l.SetSize(op.residual_lsize);

   // assume only a single element type for now
   std::vector<const DofToQuad*> dtq;
   for (const auto &field : op.fields)
   {
      dtq.emplace_back(GetDofToQuad<entity_t>(field, op.integration_rule,
                                              doftoquad_mode));
   }
   const int q1d = (int)floor(pow(num_qp, 1.0/op.mesh.Dimension()) + 0.5);

   residual_e.SetSize(R->Height());

   const int residual_size_on_qp = GetSizeOnQP<entity_t>(
                                      mfem::get<hardcoded_output_idx>(kernel.outputs),
                                      op.fields[test_space_field_idx]);

   auto input_dtq_maps = create_dtq_maps<entity_t>(kernel.inputs, dtq,
                                                   kinput_to_field);
   auto output_dtq_maps = create_dtq_maps<entity_t>(kernel.outputs, dtq,
                                                    koutput_to_field);

   auto input_fops = create_bare_fops(kernel.inputs);
   auto output_fops = create_bare_fops(kernel.outputs);

   const int test_vdim = mfem::get<hardcoded_output_idx>(output_fops).vdim;
   const int test_op_dim =
      mfem::get<hardcoded_output_idx>(output_fops).size_on_qp /
      mfem::get<hardcoded_output_idx>(output_fops).vdim;
   const int num_test_dof = R->Height() /
                            mfem::get<hardcoded_output_idx>(output_fops).vdim /
                            num_entities;

   auto ir_weights = Reshape(this->op.integration_rule.GetWeights().Read(),
                             num_qp);

   auto input_size_on_qp = get_input_size_on_qp(kernel.inputs,
                                                std::make_index_sequence<kernel.num_kinputs> {});

   auto shmem_info = get_shmem_info<entity_t>(input_dtq_maps,
                                              output_dtq_maps,
                                              op.fields,
                                              num_entities,
                                              kernel.inputs,
                                              num_qp,
                                              input_size_on_qp,
                                              residual_size_on_qp);

   Vector shmem_cache(shmem_info.total_size);

   print_shared_memory_info(shmem_info);

   func = [=](Vector &ye_mem) mutable
   {
      restriction<entity_t>(op.solutions, solutions_l, this->fields_e,
                            op.element_dof_ordering);
      restriction<entity_t>(op.parameters, parameters_l, this->fields_e,
                            op.element_dof_ordering,
                            op.solutions.size());

      auto ye = Reshape(ye_mem.ReadWrite(), test_vdim, num_test_dof, num_entities);
      auto wrapped_fields_e = wrap_fields(this->fields_e, shmem_info.field_sizes, num_entities);

      forall([=] MFEM_HOST_DEVICE (int e, void *shmem)
      {
         // printf("\ne: %d\n", e);
         // tic();
         auto input_dtq_shmem = load_dtq_mem(
            shmem,
            shmem_info.offsets[SharedMemory::Index::INPUT_DTQ],
            shmem_info.input_dtq_sizes,
            input_dtq_maps);

         auto output_dtq_shmem = load_dtq_mem(
            shmem,
            shmem_info.offsets[SharedMemory::Index::OUTPUT_DTQ],
            shmem_info.output_dtq_sizes,
            output_dtq_maps);

         auto fields_shmem = load_field_mem(
            shmem,
            shmem_info.offsets[SharedMemory::Index::FIELD],
            shmem_info.field_sizes,
            kinput_to_field,
            wrapped_fields_e,
            e);

         // These methods don't copy, they simply create a `DeviceTensor` object
         // that points to correct chunks of the shared memory pool.
         auto input_shmem = load_input_mem(
            shmem,
            shmem_info.offsets[SharedMemory::Index::INPUT],
            shmem_info.input_sizes,
            num_qp);

         auto residual_shmem = load_residual_mem(
            shmem,
            shmem_info.offsets[SharedMemory::Index::OUTPUT],
            shmem_info.residual_size,
            num_qp);

         auto scratch_mem = load_scratch_mem(
            shmem,
            shmem_info.offsets[SharedMemory::Index::TEMP],
            shmem_info.temp_sizes);

         MFEM_SYNC_THREAD;
         // printf("shmem load elapsed: %.1fus\n", toc() * 1e6);

         // tic();
         map_fields_to_quadrature_data<TensorProduct>(
            input_shmem, fields_shmem, input_dtq_shmem, input_fops, ir_weights, scratch_mem,
         std::make_index_sequence<kernel.num_kinputs> {});
         // printf("interpolate elapsed: %.1fus\n", toc() * 1e6);

         // tic();
         MFEM_FOREACH_THREAD(qx, x, q1d)
         {
            MFEM_FOREACH_THREAD(qy, y, q1d)
            {
               MFEM_FOREACH_THREAD(qz, z, q1d)
               {
                  const int q = qx + q1d * (qy + q1d * qz);
                  auto kernel_args = decay_tuple<typename kernel_t::kf_param_ts> {};
                  auto r = Reshape(&residual_shmem(0, q), residual_size_on_qp);
                  apply_kernel(r, kernel.func, kernel_args, input_shmem, q);
               }
            }
         }
         MFEM_SYNC_THREAD;
         // printf("qf elapsed: %.1fus\n", toc() * 1e6);

         // tic();
         auto fhat = Reshape(&residual_shmem(0, 0), test_vdim, test_op_dim, num_qp);
         auto y = Reshape(&ye(0, 0, e), num_test_dof, test_vdim);
         map_quadrature_data_to_fields<TensorProduct>(y, fhat,
                                                      mfem::get<0>(output_fops),
                                                      output_dtq_shmem[hardcoded_output_idx],
                                                      scratch_mem);
         // printf("integrate elapsed: %.1fus\n", toc() * 1e6);

      }, num_entities, q1d, q1d, q1d, shmem_info.total_size, shmem_cache.ReadWrite());

      if constexpr (std::is_same_v<decltype(output_fop), None>)
      {
         residual_l = ye_mem;
      }
      else
      {
         R->MultTranspose(ye_mem, residual_l);
      }
   };

   if constexpr (std::is_same_v<decltype(output_fop), None>)
   {
      prolongation_transpose = [&](Vector &r_local, Vector &y)
      {
         y = r_local;
      };
   }
   else if constexpr (std::is_same_v<decltype(output_fop), One>)
   {
      prolongation_transpose = [&](Vector &r_local, Vector &y)
      {
         double local_sum = r_local.Sum();
         MPI_Allreduce(&local_sum, y.GetData(), 1, MPI_DOUBLE, MPI_SUM,
                       op.mesh.GetComm());
         MFEM_ASSERT(y.Size() == 1, "output size doesn't match kernel description");
      };
   }
   else
   {
      auto P = get_prolongation(op.fields[test_space_field_idx]);
      prolongation_transpose = [P](const Vector &r_local, Vector &y)
      {
         P->MultTranspose(r_local, y);
      };
   }
}
