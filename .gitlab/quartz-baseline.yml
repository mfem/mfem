# Copyright (c) 2010-2023, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

variables:
  BASELINE_TEST: baseline

stages:
  - setup
  - baseline_check
  - baseline_report
  - cleanup
  - baseline_publish

baselinecheck_mfem_intel_quartz:
  extends: [.on_quartz]
  stage: baseline_check
  variables:
    # TPLS_DIR is used in .gitlab/scripts/baseline to provide the tpls location
    # when call the runtest script in MFEM test repo.
    # Note: the value must be consistent with the setup performed in
    #       .gitlab/configs/setup-baseline.yml.
    TPLS_DIR: ${BUILD_ROOT}/tpls
  script:
    - echo ${BUILD_ROOT}
    - echo ${TPLS_DIR}
    # Used by the tests in MFEM/tests:
    - export MFEM_TEST_NP=32
    # The next script uses the following environment variables:
    # * BASELINE_TEST, SYS_TYPE, CI_PROJECT_DIR, ARTIFACTS_DIR,
    # * BUILD_ROOT, TPLS_DIR, MACHINE_NAME
    - .gitlab/scripts/baseline
  artifacts:
    when: always
    paths:
      - ${ARTIFACTS_DIR}
  allow_failure: true

cleanup:
  extends: .on_quartz
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - echo "BUILD_ROOT=${BUILD_ROOT}"
    - rm -rf "${BUILD_ROOT}" || true
    - echo "CI_PROJECT_DIR=${CI_PROJECT_DIR}"
    - make -C "${CI_PROJECT_DIR}" distclean

report_baseline:
  extends: [.on_quartz]
  stage: baseline_report
  script:
    - echo ${MACHINE_NAME}
    - echo ${AUTOTEST}
    - echo ${AUTOTEST_COMMIT}
    - echo "AUTOTEST_ROOT ${AUTOTEST_ROOT}"
    - cd ${AUTOTEST_ROOT}
    - |
      (
        date
        echo "Waiting to acquire lock on '$PWD/autotest.lock' ..."
        # try to get an exclusive lock on fd 9 (autotest.lock) repeating the try
        # every 5 seconds; we may want to add a counter for the number of
        # retries to interrupt a potential infinite loop
        while ! flock -n 9; do
          sleep 5
        done
        echo "Acquired lock on '$PWD/autotest.lock'"
        date
        # ----------------------
        cd ${AUTOTEST_ROOT}/autotest || \
          { echo "Invalid 'autotest' dir: ${AUTOTEST_ROOT}/autotest"; exit 1; }
        mkdir -p ${MACHINE_NAME}
        rundir="${MACHINE_NAME}/$(date +%Y-%m-%d)-gitlab-${BASELINE_TEST}-${CI_COMMIT_REF_SLUG}"
        rundir=$(${CI_PROJECT_DIR}/.gitlab/scripts/safe_create_rundir ${rundir})
        cp ${CI_PROJECT_DIR}/${ARTIFACTS_DIR}/* ${rundir}
        printf "%s\n" "" "Pipeline URL:" "$CI_PIPELINE_URL" \
          >> ${rundir}/pipeline.txt
        # We create an autotest-email.html file, because that's how we signal
        # that there was an error / diff (temporary).
        if [[ -f ${rundir}/${BASELINE_TEST}.err ]] || \
           [[ -f ${rundir}/${BASELINE_TEST}-${SYS_TYPE}.diff ]]; then
          cp ${rundir}/pipeline.txt ${rundir}/autotest-email.html
        fi
        msg="GitLab CI log for ${BASELINE_TEST} on ${MACHINE_NAME} ($(date +%Y-%m-%d))"
        if [[ "$AUTOTEST_COMMIT" != "NO" ]]; then
          git pull && \
          git add ${rundir} && \
          git commit -m "${msg}" && \
          ${CI_PROJECT_DIR}/.gitlab/scripts/git_try_to_push
        else
          for file in ${rundir}/*; do
            echo "------------------------------"
            echo "Content of '$file'"
            echo "******************************"
            cat $file
            echo "******************************"
          done
          rm -rf ${rundir} || true
        fi
        err=$?
        # ----------------------
        # sleep for a period to allow NFS to propagate the above changes;
        # clearly, there is no guarantee that other NFS clients will see the
        # changes even after the timeout
        sleep 10
        exit $err
      ) 9> autotest.lock

baselinepublish_mfem_quartz:
  extends: [.on_quartz]
  stage: baseline_publish
  rules:
    # - if: '$CI_COMMIT_BRANCH == "master" || $REBASELINE == "YES"'
    - if: '$REBASELINE == "YES"'
      when: manual
  script:
    - echo ${BUILD_ROOT}
    - echo ${PWD}
    - echo ${ARTIFACTS_DIR}
    - ls -lA ${ARTIFACTS_DIR}
    - .gitlab/scripts/rebaseline

include:
  - local: .gitlab/configs/common.yml
  - local: .gitlab/configs/quartz-config.yml
  - local: .gitlab/configs/setup-baseline.yml
