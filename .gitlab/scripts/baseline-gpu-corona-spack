#!/bin/bash

# Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at the
# Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights reserved.
# See file COPYRIGHT for details.
#
# This file is part of the MFEM library. For more information and source code
# availability see http://mfem.googlecode.com.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License (as published by the Free
# Software Foundation) version 2.1 dated February 1999.

mfem_dir=${PWD}
test_dir=${TEST_DIR}

glob_err=${BASELINE_TEST}.err
base=${BASELINE_TEST}-${MACHINE_NAME}
base_diff=${base}.diff
base_patch=${base}.patch
base_out=${base}.out
artifacts_path=${mfem_dir}/${ARTIFACTS_DIR}

# Set the test and run directories
num_proc=4
build_np=${MFEM_TEST_NP:-4}

device="hip"
host="corona"
mpiexec="srun -p mi60 "
mpiexec_numproc_flag="-n"

# Remove files generated by previous runs of this script
run_dir="${mfem_dir}/${base}"
[[ -d ${run_dir} ]] && rm -f ${run_dir}
mkdir -p ${run_dir}

echo "-----------------------------------------"
echo " Compiling MFEM serial + $device ..."
echo "-----------------------------------------"

srun -N 1 -p mi60 -t 10 tests/gitlab/build_and_test --spec "@develop%gcc@8.3.1+rocm amdgpu_target=gfx906" --build-root "${BUILD_ROOT}" --deps-only

srun -N 1 -p mi60 -t 10 tests/gitlab/build_and_test --build-root "${BUILD_ROOT}" --build-only

# Make sure "." is the first directory in the path
export PATH=.:"$PATH"

# Default serial example runs
printf "Running the serial + ${device} MFEM examples ...\n"
cd examples

( printf "\nTesting: Example 1\n\n"
  ex1  -d ${device} -no-vis
  printf "\nTesting: Example 3\n\n"
  ex3  -d ${device} -no-vis
  printf "\nTesting: Example 4\n\n"
  ex4  -d ${device} -no-vis
  printf "\nTesting: Example 5\n\n"
  ex5  -d ${device} -no-vis
  printf "\nTesting: Example 6\n\n"
  ex6  -d ${device} -no-vis
  printf "\nTesting: Example 9\n\n"
  ex9  -d ${device} -no-vis
  printf "\nTesting: Example 22\n\n"
  ex22 -d ${device} -no-vis
  printf "\nTesting: Example 24\n\n"
  ex24 -d ${device} -no-vis
  printf "\nTesting: Example 25\n\n"
  ex25 -d ${device} -no-vis
  printf "\nTesting: Example 26\n\n"
  ex26 -d ${device} -no-vis
) > "$run_dir"/baseline-gpu-$host.out 2>&1

cd ${mfem_dir}


echo "-----------------------------------------"
echo " Compiling MFEM parallel + $device..."
echo "-----------------------------------------"

srun -N 1 -p mi60 -t 10 -N 1 tests/gitlab/build_and_test --spec "@develop%gcc@8.3.1+mpi+rocm amdgpu_target=gfx906" --build-root "${BUILD_ROOT}" --deps-only

srun -N 1 -p mi60 -t 10 -N 1 tests/gitlab/build_and_test --build-root "${BUILD_ROOT}" --build-only


# Special parallel runs on 1 processor
printf "Running selected parallel + $device MFEM examples on 1 processor ...\n"
mpi_run_one="$mpiexec $mpiexec_numproc_flag 1"
cd "$mfem_dir"/examples
( printf "\nTesting: Example 1p\n\n"
  $mpi_run_one ex1p  -d ${device} -no-vis
  printf "\nTesting: Example 2p\n\n"
  $mpi_run_one ex2p  -d ${device} -no-vis
  printf "\nTesting: Example 3p\n\n"
  $mpi_run_one ex3p  -d ${device} -no-vis
  printf "\nTesting: Example 4p\n\n"
  $mpi_run_one ex4p  -d ${device} -no-vis
  printf "\nTesting: Example 5p\n\n"
  $mpi_run_one ex5p  -d ${device} -no-vis
  printf "\nTesting: Example 6p\n\n"
  $mpi_run_one ex6p  -d ${device} -no-vis
  printf "\nTesting: Example 7p\n\n"
  $mpi_run_one ex7p  -d ${device} -no-vis
  printf "\nTesting: Example 9p\n\n"
  $mpi_run_one ex9p  -d ${device} -no-vis
  printf "\nTesting: Example 13p\n\n"
  $mpi_run_one ex13p -d ${device} -no-vis
  printf "\nTesting: Example 22p\n\n"
  $mpi_run_one ex22p -d ${device} -no-vis
  printf "\nTesting: Example 24p\n\n"
  $mpi_run_one ex24p -d ${device} -no-vis
  printf "\nTesting: Example 25p\n\n"
  $mpi_run_one ex25p -d ${device} -no-vis
  printf "\nTesting: Example 26p\n\n"
  $mpi_run_one ex26p -d ${device} -no-vis
) >> "$run_dir"/baseline-gpu-$host.out 2>&1

# Default parallel example runs
printf "Running the parallel + $device MFEM examples on $num_proc processors ...\n"
mpi_run="$mpiexec $mpiexec_numproc_flag $num_proc"
cd "$mfem_dir"/examples
( printf "\nTesting: Example 1p\n\n"
  $mpi_run ex1p  -d ${device} -no-vis
  printf "\nTesting: Example 2p\n\n"
  $mpi_run ex2p  -d ${device} -no-vis
  printf "\nTesting: Example 3p\n\n"
  $mpi_run ex3p  -d ${device} -no-vis
  printf "\nTesting: Example 4p\n\n"
  $mpi_run ex4p  -d ${device} -no-vis
  printf "\nTesting: Example 5p\n\n"
  $mpi_run ex5p  -d ${device} -no-vis
  printf "\nTesting: Example 6p\n\n"
  $mpi_run ex6p  -d ${device} -no-vis
  printf "\nTesting: Example 7p\n\n"
  $mpi_run ex7p  -d ${device} -no-vis
  printf "\nTesting: Example 9p\n\n"
  $mpi_run ex9p  -d ${device} -no-vis
  printf "\nTesting: Example 13p\n\n"
  $mpi_run ex13p -d ${device} -no-vis
  printf "\nTesting: Example 22p\n\n"
  $mpi_run ex22p -d ${device} -no-vis
  printf "\nTesting: Example 24p\n\n"
  $mpi_run ex24p -d ${device} -no-vis
  printf "\nTesting: Example 25p\n\n"
  $mpi_run ex25p -d ${device} -no-vis
  printf "\nTesting: Example 26p\n\n"
  $mpi_run ex26p -d ${device} -no-vis
) >> "$run_dir"/baseline-gpu-$host.out 2>&1

cd "$run_dir"

# Compare with saved baseline file
if ! [ -f "$test_dir"/baseline-gpu-$host.saved ]; then
   printf "\nSaved baseline file not found: %s\n\n" \
      "$test_dir/baseline-gpu-$host.saved" 1>&2
   exit 1
fi

filt=(-e 's/\(= \).*\( seconds\)/\1x.xx\2/'
      -e 's/took .*s/took x.xxs/'
      -e 's/done, .*s/done, x.xxs/'
      -e 's/Time per CG step: .*s/Time per CG step: x.xxs/'
      -e '/mpibind\.prolog/d')

sed "${filt[@]}" baseline-gpu-$host.out > baseline-gpu-$host.out.filt
sed "${filt[@]}" "$test_dir"/baseline-gpu-$host.saved > baseline-gpu-$host.saved.filt

diff -b -u --show-function-line="Testing:" \
   baseline-gpu-$host.saved.filt baseline-gpu-$host.out.filt > baseline-gpu-$host.diff

rm -f baseline-gpu-$host.saved.filt baseline-gpu-$host.out.filt

# Create "baseline-gpu-$host.patch" file for "baseline-gpu-$host.out" relative
# to "$test_dir/baseline-gpu-$host.saved":
diff "$test_dir/baseline-gpu-$host.saved" "baseline-gpu-$host.out" \
   > "baseline-gpu-$host.patch"
# Rename the .out file to .out.orig:
mv "baseline-gpu-$host.out" "baseline-gpu-$host.out.orig"
# Recover the .out file from the .saved and .patch files:
cp -p "$test_dir/baseline-gpu-$host.saved" "baseline-gpu-$host.out"
patch "baseline-gpu-$host.out" < "baseline-gpu-$host.patch"
# Check that the .patch file recovers the .out file exactly:
if diff -q "baseline-gpu-$host.out.orig" "baseline-gpu-$host.out"; then
   # Keep the smaller of the files: .out.orig or .patch
   set -- `wc -c "baseline-gpu-$host.patch"`
   psize="$1"
   set -- `wc -c "baseline-gpu-$host.out.orig"`
   osize="$1"
   if [ "$psize" -lt "$osize" ]; then
      # Keep the .patch file
      rm -f "baseline-gpu-$host".{out.orig,out}
   else
      # Keep the .out.orig file
      rm -f "baseline-gpu-$host".{out,patch}
      mv -f "baseline-gpu-$host.out.orig" "baseline-gpu-$host.out"
   fi
else
   echo "Invalid .patch file, keeping the .out file!"
   mv -f "baseline-gpu-$host.out.orig" "baseline-gpu-$host.out"
   rm -f "baseline-gpu-$host.patch"
fi

if [ -s baseline-gpu-$host.diff ]; then
   printf "\nTest FAILED: there are differences with the saved baseline.\n"
   printf "For details, see the file: baseline-gpu-$host.diff\n\n"
else
   printf "\nTest PASSED: no differences with the saved baseline.\n\n"
   rm -f baseline-gpu-$host.diff
fi

# post
mkdir ${artifacts_path}

if [[ -s ${glob_err} ]]
then
  echo "ERROR during ${BASELINE_TEST} execution";
  echo "Here is the ${glob_err} file content";
  cat ${glob_err}
  cp ${glob_err} ${artifacts_path}/${glob_err}
  exit 1;
elif [[ ! -f ${base_patch} && ! -f ${base_out} ]]
then
  echo "Something went WRONG in ${BASELINE_TEST}:";
  echo "Either ${base_patch} or ${base_out} should exists";
  exit 1;
elif [[ -f ${base_patch} ]]
then
  echo "${BASELINE_TEST}: Differences found, patch generated"
  cp ${base_patch} ${artifacts_path}/${base_patch}
elif [[ -f ${base_out} ]]
then
  echo "${BASELINE_TEST}: Differences found, replacement file generated"
  cp ${base_out} ${artifacts_path}/${base_out}
fi

# base_diff won't even exist if there is no difference.
if [[ -f ${base_diff} ]]
then
  echo "${BASELINE_TEST}: Relevant differences (filtered diff) ..."
  cat ${base_diff}
  cp ${base_diff} ${artifacts_path}/${base_diff}
  # We create a .err file, because that's how we signal that there was a diff.
  cp ${base_diff} ${artifacts_path}/gitlab-${BASELINE_TEST}-${MACHINE_NAME}.err
fi

if [[ ! -s ${base_diff} ]]
then
  echo "${BASELINE_TEST}: PASSED"
  true
else
  echo "${BASELINE_TEST}: FAILED"
  false
fi
