# Copyright (c) 2010-2021, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

# In this CI section, we build different variants of mfem and run test on them.
name: builds-and-tests-linux

# Github actions can use the default "GITHUB_TOKEN". By default, this token
# is set to have permissive access. However, this is not a good practice
# security-wise. Here we use an external action, so we restrict the
# permission to the minimum required.
# When the 'permissions' is set, all the scopes not mentioned are set to the
# most restrictive setting. So the following is enough.
permissions:
  actions: write

on:
  push:
    branches:
      - master
      - next
  pull_request:

env:
  HYPRE_ARCHIVE: v2.19.0.tar.gz
  HYPRE_TOP_DIR: hypre-2.19.0
  METIS_ARCHIVE: metis-4.0.3.tar.gz
  METIS_TOP_DIR: metis-4.0.3
  MFEM_TOP_DIR: mfem

# Note for future improvements:
#
# We cannot reuse cached dependencies and have to build them for each target
# although they could be shared sometimes. That's because Github cache Action
# has no read-only mode. But there is a PR ready for this
# (https://github.com/actions/cache/pull/489)

jobs:
  clean:
    name: clean-ubuntu-18.04
    runs-on: ubuntu-18.04
    steps:
    # This external action allows to interrupt a workflow alrealy running on
    # the same branch to same resource
    - name: cancel previous runs
      uses: styfle/cancel-workflow-action@0.9.0
      with:
        access_token: ${{ github.token }}

  dependencies:
    needs: clean
    name: deps-ubuntu-18.04
    runs-on: ubuntu-18.04
    steps:

    - name: get MPI
      run: |
        sudo apt-get install mpich libmpich-dev
        export MAKE_CXX_FLAG="MPICXX=mpic++"

    # Get Hypre through cache, or build it.
    # Install will only run on cache miss.
    - name: cache hypre
      id: hypre-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.HYPRE_TOP_DIR }}
        key: ${{ runner.os }}-build-${{ env.HYPRE_TOP_DIR }}-optimize-deps-space-v5

    - name: install hypre
      if: steps.hypre-cache.outputs.cache-hit != 'true'
      uses: mfem/github-actions/build-hypre@bernede1/optimize-deps-space
      with:
        hypre-archive: ${{ env.HYPRE_ARCHIVE }}
        hypre-dir: ${{ env.HYPRE_TOP_DIR }}

    - name: upload hypre artifact
      uses: actions/upload-artifact@v2
      with:
        name: hypre-${{ runner.os }}
        path: ${{ env.HYPRE_TOP_DIR }}
        retention-days: 1

    # Get Metis through cache, or build it.
    # Install will only run on cache miss.
    - name: cache metis
      id: metis-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.METIS_TOP_DIR }}
        key: ${{ runner.os }}-build-${{ env.METIS_TOP_DIR }}-optimize-deps-space-v5

    - name: install metis
      if: steps.metis-cache.outputs.cache-hit != 'true'
      uses: mfem/github-actions/build-metis@bernede1/optimize-deps-space
      with:
        metis-archive: ${{ env.METIS_ARCHIVE }}
        metis-dir: ${{ env.METIS_TOP_DIR }}

    - name: upload metis artifact
      uses: actions/upload-artifact@v2
      with:
        name: metis-${{ runner.os }}
        path: ${{ env.METIS_TOP_DIR }}
        retention-days: 1


  builds:
    needs: dependencies
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        target: [debug, optim]
        mpi: [sequential, parallel]
        build-system: [make]
        # 'include' allows us to
        # - add a variable without creating a new matrix dimension.
        # - add a new combination ('build-system: cmake' case here)
        #
        # note: we will gather coverage info for any non-debug run except the
        # CMake build.
        include:
          - target: debug
            codecov: NO
          - target: optim
            codecov: YES
          - target: optim
            codecov: NO
            mpi: parallel
            build-system: cmake
    name: bld-linux-${{ matrix.target }}-${{ matrix.mpi }}-${{ matrix.build-system }}

    steps:
    # Only get MPI if defined for the job.
    - name: get MPI
      if: matrix.mpi == 'parallel'
      run: |
        sudo apt-get install mpich libmpich-dev
        export MAKE_CXX_FLAG="MPICXX=mpic++"

    - name: download hypre artifact
      uses: actions/download-artifact@v2
      with:
        name: hypre-${{ runner.os }}
        path: ${{ env.HYPRE_TOP_DIR }}

    - name: download metis artifact
      uses: actions/download-artifact@v2
      with:
        name: metis-${{ runner.os }}
        path: ${{ env.METIS_TOP_DIR }}

    # Checkout MFEM in "mfem" subdirectory. Final path:
    # /home/runner/work/mfem/mfem/mfem
    - name: checkout mfem
      uses: actions/checkout@v2
      with:
        path: ${{ env.MFEM_TOP_DIR }}
        # Fetch the complete history for codecov to access commits ID
        fetch-depth: 0

    # MFEM build and test
    - name: build
      uses: mfem/github-actions/build-mfem@bernede1/optimize-deps-space
      with:
        os: ${{ runner.os }}
        target: ${{ matrix.target }}
        codecov: ${{ matrix.codecov }}
        shared: "only"
        mpi: ${{ matrix.mpi }}
        build-system: ${{ matrix.build-system }}
        hypre-dir: ${{ env.HYPRE_TOP_DIR }}
        metis-dir: ${{ env.METIS_TOP_DIR }}
        mfem-dir: ${{ env.MFEM_TOP_DIR }}

    - name: clean mfem dir
      run: |
        cd ${{ env.MFEM_TOP_DIR }}
        rm -rf **/*.o **/*~ **/*.dSYM
        rm -rf .git

    - name: upload mfem artifact
      uses: actions/upload-artifact@v2
      with:
        name: mfem-${{ runner.os }}-${{ matrix.target }}-${{ matrix.mpi }}-${{ matrix.build-system }}
        path: ${{ env.MFEM_TOP_DIR }}
        retention-days: 1


  tests:
    needs: builds
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        target: [debug, optim]
        mpi: [sequential, parallel]
        build-system: [make]
        # 'include' allows us to
        # - add a variable without creating a new matrix dimension.
        # - add a new combination ('build-system: cmake' case here)
        #
        # note: we will gather coverage info for any non-debug run except the
        # CMake build.
        include:
          - target: debug
            codecov: NO
          - target: optim
            codecov: YES
#          - target: optim
#            codecov: NO
#            mpi: parallel
#            build-system: cmake
    name: test-linux-${{ matrix.target }}-${{ matrix.mpi }}-${{ matrix.build-system }}

    steps:
    # Only get MPI if defined for the job.
    - name: get MPI
      if: matrix.mpi == 'parallel'
      run: |
        sudo apt-get install mpich libmpich-dev
        export MAKE_CXX_FLAG="MPICXX=mpic++"

    - name: get lcov
      if: matrix.codecov == 'YES'
      run: |
        sudo apt-get install lcov

    - name: download hypre artifact
      uses: actions/download-artifact@v2
      with:
        name: hypre-${{ runner.os }}
        path: ${{ env.HYPRE_TOP_DIR }}

    - name: download metis artifact
      uses: actions/download-artifact@v2
      with:
        name: metis-${{ runner.os }}
        path: ${{ env.METIS_TOP_DIR }}

    - name: download mfem artifact
      uses: actions/download-artifact@v2
      with:
        name: mfem-${{ runner.os }}-${{ matrix.target }}-${{ matrix.mpi }}-${{ matrix.build-system }}
        path: ${{ env.MFEM_TOP_DIR }}

    - name: tests
      run: |
        if [[ ${{ matrix.mpi }} == 'parallel' ]]; then
          ln -s -f ${{ env.HYPRE_TOP_DIR }} hypre;
          ln -s -f ${{ env.METIS_TOP_DIR}} metis-4.0;
        fi
        if [[ ${{ matrix.target }} == 'optim' ]]; then
          if [[ ${{ matrix.build-system }} == 'make' ]]; then
            cd ${{ env.MFEM_TOP_DIR }}
            make -j 3 examples
            make test
          elif [[ ${{ matrix.build-system }} == 'cmake' ]]; then
            cd ${{ env.MFEM_TOP_DIR }}
            make -C build -j 3 examples
            cd build && ctest --output-on-failure
          fi
        fi

    # Code coverage (process and upload reports)
    - name: codecov
      if: matrix.codecov == 'YES'
      uses: mfem/github-actions/upload-coverage@bernede1/optimize-deps-space
      with:
        name: ${{ runner.os }}-${{ matrix.mpi }}
        project_dir: ${{ env.MFEM_TOP_DIR }}
        directories: "fem general linalg mesh"
