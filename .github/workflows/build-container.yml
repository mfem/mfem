name: "Docker"

on:
  # Always have a base image ready to go - this is a nightly build
  schedule:
    - cron: 0 3 * * *

  # Allow manual trigger of a build
  workflow_dispatch:

  # On push to main we build and deploy images
  push:
    branches:
      - master

  # Publish packages on release
  release:
    types: [published]

jobs:
  build:
    if: github.repository == 'mfem/mfem' # Don't run in forks
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        # Dockerfiles to build, a matrix supports future expanded builds
        container: [["config/docker/Dockerfile.base", "ghcr.io/mfem/mfem-ubuntu-base"],
                    ["config/docker/Dockerfile", "ghcr.io/mfem/mfem-ubuntu"]]

    runs-on: ubuntu-latest
    name: Build
    steps:
      - name: Run Actions Cleaner
        uses: easimon/maximize-build-space@v8
        with:
          overprovision-lvm: 'true'
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      # It's easier to reference named variables than indexes of the matrix
      - name: Set Environment
        env:
          dockerfile: ${{ matrix.container[0] }}
          uri: ${{ matrix.container[1] }}
        run: |
          echo "dockerfile=$dockerfile" >> $GITHUB_ENV
          echo "uri=$uri" >> $GITHUB_ENV

      - name: Pull previous layers for cache
        run: docker pull ${uri}:latest || echo "No container to pull"

      - name: Build Container
        run: |
           container=$uri:latest
           docker build -f ${dockerfile} -t ${container} .
           echo "container=$container" >> $GITHUB_ENV

      - name: GHCR Login
        if: (github.event_name != 'pull_request')
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy
        if: (github.event_name != 'pull_request')
        run: |
            docker push ${container}

      - name: Tag and Push Release
        if: (github.event_name == 'release')
        run: |
            tag=${GITHUB_REF#refs/tags/}
            echo "Tagging and releasing ${uri}:${tag}"
            docker tag ${uri}:latest ${uri}:${tag}
            docker push ${uri}:${tag}
