# Copyright (c) 2010-2020, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

language: cpp

os: linux
dist: bionic

stages:
  - checks
  - tests
  - optional

env:
  global:
    - HYPRE_ARCHIVE=v2.19.0.tar.gz
      HYPRE_URL=https://github.com/hypre-space/hypre/archive/$HYPRE_ARCHIVE
      HYPRE_TOP_DIR=hypre-2.19.0

jobs:
  include:

    # ========================
    #         Checks
    # ========================
    # - code-style
    # - documentation
    # - gitignore

    - stage: checks
      os: linux
      dist: xenial
      name: "code-style"
      addons:
        apt:
          packages:
            - astyle=2.05.1-0ubuntu1
      script:
        - cd ${TRAVIS_BUILD_DIR}
        - cd tests/scripts
        - ./runtest code-style

    - stage: checks
      os: linux
      name: "documentation"
      addons:
        apt:
          packages:
            - doxygen
            - graphviz
      script:
        - cd ${TRAVIS_BUILD_DIR}
        - cd tests/scripts
        - ./runtest documentation

    - stage: checks
      os: linux
      name: "gitignore"
      addons:
        apt:
          packages:
            - mpich
            - libmpich-dev
      env: MPI=YES
      before_script:
        - cd ${TRAVIS_BUILD_DIR}
        - mpicxx -v
        - make config MFEM_USE_MPI=YES MFEM_MPI_NP=2
        - make all -j3
        - make test-noclean
      script:
        - cd tests/scripts
        - ./runtest gitignore
      cache:
        ccache: true
        directories:
          - $TRAVIS_BUILD_DIR/../$HYPRE_TOP_DIR/src/hypre
          - $TRAVIS_BUILD_DIR/../metis-4.0
      before_cache:
        - cd $TRAVIS_BUILD_DIR/../metis-4.0;
          mv libmetis.a Lib ..; rm -rf * ; mv ../libmetis.a ../Lib .;
          rm -f Lib/*.{c,o}

    # ========================
    #  Optional Checks/Tests
    # ========================
    # - branch-history

    - stage: optional
      name: "branch-history"
      if: branch != next
      # need full git history for the binary/big files check
      git:
        depth: false
      script:
        - cd ${TRAVIS_BUILD_DIR}
        # update master
        - git fetch origin master:master
        # checkout a branch (otherwise Travis works in detached head)
        - git checkout -b travis_tests
        - cd tests/scripts
        - ./runtest branch-history

    # ========================
    #       Linux tests
    # ========================
    # - serial + debug
    # - serial
    # - parallel + debug
    # - parallel

    - stage: tests
      os: linux
      compiler: gcc
      name: "Linux: Serial + Debug"
      env: DEBUG=YES
           MPI=NO
           CODECOV=NO
           MFEM_TEST_TARGET=check
      cache:
        ccache: true

    - os: linux
      compiler: gcc
      name: "Linux: Serial"
      env: DEBUG=NO
           MPI=NO
           CODECOV=NO
           MFEM_TEST_TARGET=test
      cache:
        ccache: true

    - os: linux
      compiler: gcc
      name: "Linux: Parallel + Debug"
      addons:
        apt:
          # sources:
            # - ubuntu-toolchain-r-test
          packages:
            # GCC 4.9
            # - g++-4.9
            # MPICH
            - mpich
            - libmpich-dev
            # OpenMPI
            # - openmpi-bin
            # - libopenmpi-dev
      env: DEBUG=YES
           MPI=YES
           CODECOV=NO
           MFEM_TEST_TARGET=check
           NPROCS=2
      cache:
        ccache: true
        directories:
          - $TRAVIS_BUILD_DIR/../$HYPRE_TOP_DIR/src/hypre
          - $TRAVIS_BUILD_DIR/../metis-4.0
      before_cache:
        - cd $TRAVIS_BUILD_DIR/../metis-4.0;
          mv libmetis.a Lib ..; rm -rf * ; mv ../libmetis.a ../Lib .;
          rm -f Lib/*.{c,o}

    - os: linux
      compiler: gcc
      name: "Linux: Parallel"
      addons:
        apt:
          # sources:
            # - ubuntu-toolchain-r-test
          packages:
            # GCC 4.9
            # - g++-4.9
            # MPICH
            - mpich
            - libmpich-dev
            # OpenMPI
            # - openmpi-bin
            # - libopenmpi-dev
      env: DEBUG=NO
           MPI=YES
           CODECOV=YES
           MFEM_TEST_TARGET=test
           NPROCS=2
      cache:
        ccache: true
        directories:
          - $TRAVIS_BUILD_DIR/../$HYPRE_TOP_DIR/src/hypre
          - $TRAVIS_BUILD_DIR/../metis-4.0
      before_cache:
        - cd $TRAVIS_BUILD_DIR/../metis-4.0;
          mv libmetis.a Lib ..; rm -rf * ; mv ../libmetis.a ../Lib .;
          rm -f Lib/*.{c,o}

    - os: linux
      compiler: gcc
      name: "Linux: Parallel (cmake)"
      addons:
        apt:
          packages:
            - mpich
            - libmpich-dev
      env: MPI=YES
           NPROCS=2
      script:
        - cd ${TRAVIS_BUILD_DIR}
        - mkdir ${TRAVIS_BUILD_DIR}/build
        - cd ${TRAVIS_BUILD_DIR}/build
        - cmake ..
             -DMFEM_USE_MPI=ON
             -DHYPRE_DIR=${TRAVIS_BUILD_DIR}/../$HYPRE_TOP_DIR/src/hypre
             -DMFEM_MPI_NP=$NPROCS
        - make -j3 mfem examples
        - cd ${TRAVIS_BUILD_DIR}/build/tests/unit
        - make -j3
        - ctest --output-on-failure
      cache:
        ccache: true
        directories:
          - $TRAVIS_BUILD_DIR/../$HYPRE_TOP_DIR/src/hypre
          - $TRAVIS_BUILD_DIR/../metis-4.0
      before_cache:
        - cd $TRAVIS_BUILD_DIR/../metis-4.0;
          mv libmetis.a Lib ..; rm -rf * ; mv ../libmetis.a ../Lib .;
          rm -f Lib/*.{c,o}

    # ========================
    #      Mac OS X tests
    # ========================
    # - serial + debug
    # - serial
    # - parallel + debug
    # - parallel

    - os: osx
      osx_image: xcode11.2
      compiler: clang
      name: "Mac: Serial + Debug"
      addons:
        homebrew:
          packages:
            - ccache
      env: DEBUG=YES
           MPI=NO
           CODECOV=NO
           MFEM_TEST_TARGET=check
      cache:
        ccache: true

    - os: osx
      osx_image: xcode11.2
      compiler: clang
      name: "Mac: Serial"
      addons:
        homebrew:
          packages:
            - ccache
      env: DEBUG=NO
           MPI=NO
           CODECOV=NO
           MFEM_TEST_TARGET=test
      cache:
        ccache: true

    - os: osx
      osx_image: xcode11.2
      compiler: clang
      name: "Mac: Parallel + Debug"
      addons:
        homebrew:
          packages:
            - ccache
      env: DEBUG=YES
           MPI=YES
           CODECOV=NO
           MFEM_TEST_TARGET=check
           NPROCS=4
           TMPDIR=/tmp
      cache:
        ccache: true
        directories:
          - $TRAVIS_BUILD_DIR/../$HYPRE_TOP_DIR/src/hypre
          - $TRAVIS_BUILD_DIR/../metis-4.0
          - $HOME/local-cached
      before_cache:
        - cd $TRAVIS_BUILD_DIR/../metis-4.0;
          mv libmetis.a Lib ..; rm -rf * ; mv ../libmetis.a ../Lib .;
          rm -f Lib/*.{c,o}

    - os: osx
      osx_image: xcode11.2
      compiler: clang
      name: "Mac: Parallel"
      addons:
        homebrew:
          packages:
            - ccache
      env: DEBUG=NO
           MPI=YES
           CODECOV=YES
           MFEM_TEST_TARGET=test
           NPROCS=4
           TMPDIR=/tmp
      cache:
        ccache: true
        directories:
          - $TRAVIS_BUILD_DIR/../$HYPRE_TOP_DIR/src/hypre
          - $TRAVIS_BUILD_DIR/../metis-4.0
          - $HOME/local-cached
      before_cache:
        - cd $TRAVIS_BUILD_DIR/../metis-4.0;
          mv libmetis.a Lib ..; rm -rf * ; mv ../libmetis.a ../Lib .;
          rm -f Lib/*.{c,o}

before_install:
   # No addon for brew yet, have to install OSX packages this way.
   # - if [ $TRAVIS_OS_NAME == "osx" ] && [ $MPI == "YES" ]; then
   #      brew install open-mpi;
   #   fi

   # Disable ccache while building dependencies that are cached:
   - echo "before \$PATH = $PATH";
     export PATH=${PATH//\/usr\/lib\/ccache:/};
     echo "after  \$PATH = $PATH"

   # On Mac OS X, build and cache OpenMPI 2.1.6:
   - if [ $TRAVIS_OS_NAME == "osx" ] && [ $MPI == "YES" ]; then
        if [ ! -e $HOME/local-cached/bin/mpicc ]; then
           mkdir -p $HOME/builds && cd $HOME/builds &&
           wget https://download.open-mpi.org/release/open-mpi/v2.1/openmpi-2.1.6.tar.bz2 &&
           tar jxf openmpi-2.1.6.tar.bz2 &&
           mkdir openmpi-build && cd openmpi-build &&
           ../openmpi-2.1.6/configure --prefix=$HOME/local-cached &&
           make -j3 all && make install;
        fi;
        PATH=$HOME/local-cached/bin:$PATH;
        cd $TRAVIS_BUILD_DIR;
     fi

   # Update environment to find g++ 4.9 installation first.
   # - if [ $TRAVIS_OS_NAME == "linux" ]; then
   #      mkdir -p latest-gcc-symlinks;
   #      ln -s /usr/bin/g++-4.9 latest-gcc-symlinks/g++;
   #      ln -s /usr/bin/gcc-4.9 latest-gcc-symlinks/gcc;
   #      ln -s /usr/bin/gcov-4.9 latest-gcc-symlinks/gcov;
   #      export PATH=$PWD/latest-gcc-symlinks:$PATH;
   #   fi

   # Install tool to upload code coverage reports to coveralls.io
   - if [ "$CODECOV" == "YES" ]; then
        export PYTHONUSERBASE=$HOME/local;
        pip install --user cpp-coveralls;
        pip install --user pyyaml;
        PATH=$HOME/local/bin:$PATH;
     fi

install:
   # Set MPI compilers, print compiler version
   - if [ $MPI == "YES" ]; then
        if [ "$TRAVIS_OS_NAME" == "linux" ]; then
           export MPICH_CC="$CC";
           export MPICH_CXX="$CXX";
        else
           export OMPI_CC="$CC";
           export OMPI_CXX="$CXX";
           mpic++ --showme:version;
        fi;
        mpic++ -v;
     else
        $CXX -v;
     fi

   # Back out of the mfem directory to install the libraries
   - cd ..

   # hypre
   - if [ $MPI == "YES" ]; then
        if [ ! -e $HYPRE_TOP_DIR/src/hypre/lib/libHYPRE.a ]; then
           wget $HYPRE_URL;
           rm -rf $HYPRE_TOP_DIR;
           tar xvzf $HYPRE_ARCHIVE;
           cd $HYPRE_TOP_DIR/src;
           ./configure --disable-fortran CC=mpicc CXX=mpic++;
           make -j3;
           cd ../..;
        else
            echo "Reusing cached $HYPRE_TOP_DIR/";
        fi;
        ln -s $HYPRE_TOP_DIR hypre;
     else
        echo "Serial build, not using hypre";
     fi

   # METIS, use a mirror because the original source server is not always up.
   # Original url:
   #    http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/OLD/metis-4.0.3.tar.gz
   - if [ $MPI == "YES" ]; then
        if [ ! -e metis-4.0/libmetis.a ]; then
           wget https://mfem.github.io/tpls/metis-4.0.3.tar.gz;
           tar xvzf metis-4.0.3.tar.gz;
           make -j3 -C metis-4.0.3/Lib CC="$CC" OPTFLAGS="-O2";
           rm -rf metis-4.0;
           mv metis-4.0.3 metis-4.0;
        else
           echo "Reusing cached metis-4.0/";
        fi;
     fi

   # Re-enable ccache on linux; enable ccache on mac os:
   - if [ $TRAVIS_OS_NAME == "linux" ]; then
        export PATH="/usr/lib/ccache:$PATH";
     else
        if [ $TRAVIS_OS_NAME == "osx" ]; then
           export PATH="/usr/local/opt/ccache/libexec:$PATH";
        fi;
     fi

   - printf "which \$CC  = "; which $CC;
     printf "which \$CXX = "; which $CXX

script:
   # Compiler
   - if [ $MPI == "YES" ]; then
        export MYCXX=mpic++;
        export MAKE_CXX_FLAG=MPICXX=$MYCXX;
     else
        export MYCXX="$CXX";
        export MAKE_CXX_FLAG=CXX=$MYCXX;
     fi

   # Print the compiler version
   - $MYCXX -v

   # Set some variables
   - cd $TRAVIS_BUILD_DIR;
     CPPFLAGS="";
     SKIP_TEST_DIRS="";
     if [ "$CODECOV" == "YES" ]; then
        CPPFLAGS="--coverage -g";
     fi;
     if [ "$TRAVIS_OS_NAME" != "linux" ] || [ "$DEBUG" == "YES" ]; then
        CPPFLAGS+=" -pedantic -Wall -Werror";
     fi

   # Configure the library
   - make config MFEM_USE_MPI=$MPI MFEM_DEBUG=$DEBUG $MAKE_CXX_FLAG
        MFEM_MPI_NP=$NPROCS CPPFLAGS="$CPPFLAGS"
   # Show the configuration
   - make info
   # Build the library
   - make -j3
   # Build the examples and the miniapps
   - make -j3 all
   # Run tests
   - make $MFEM_TEST_TARGET SKIP_TEST_DIRS="$SKIP_TEST_DIRS"

after_success:
   - if [ "$CODECOV" == "YES" ]; then
        coveralls --include fem --include general --include linalg --include
           mesh --exclude /usr --gcov-options '\-lp' --root $TRAVIS_BUILD_DIR;
     fi
